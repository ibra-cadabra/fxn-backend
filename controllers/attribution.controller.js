import { assign, retrieve } from '../services/attribution.service.js';
import Attribution from '../models/attribution.model.js';
import AttributionHistory from "../models/attributionHistory.model.js";
/**
 * ‚úÖ Attribution d'une ressource √† un technicien
 * ‚ö†Ô∏è G√®re les types : 'material' ou 'consumable' (pas de v√©hicule ici)
 */
export const assignResource = async (req, res) => {
  console.log('üì• Re√ßu dans /assign:', req.body); // üëà Ajoute ceci
  try {
    const result = await assign(req.body); // appelle le service centralis√©
    res.status(200).json(result);
  } catch (error) {
    console.error('‚ùå assignResource:', error.message);
    res.status(400).json({ error: error.message });
  }
};

/**
 * ‚úÖ Reprise d'une ressource d‚Äôun technicien
 */
export const retrieveResource = async (req, res) => {
  try {
    const result = await retrieve(req.body);
    res.status(200).json(result);
  } catch (error) {
    console.error('‚ùå retrieveResource:', error.message);
    res.status(400).json({ error: error.message });
  }
};

/**
 * üìú R√©cup√©rer tout l'historique des attributions (admin uniquement)
 * GET /attributions/history/all
 */
export const getAllAttributionHistory = async (req, res) => {
  try {
    const history = await AttributionHistory.find({}).sort({ date: -1 });
    res.status(200).json(history);
  } catch (error) {
    console.error('‚ùå getAttributionHistory:', error.message);
    res.status(500).json({ error: 'Erreur serveur interne' });
  }
};

/**
 * üü° Optionnel : Liste des attributions actives (pour dashboard ou debug)
 */
export const getAllAttributions = async (req, res) => {
  try {
    const data = await Attribution.find().sort({ date: -1 });
    res.json(data);
  } catch (error) {
    console.error('‚ùå getAllAttributions:', error.message);
    res.status(500).json({ error: 'Erreur serveur interne' });
  }
};

/**
 * üü° Optionnel : Liste des attributions actives pour un d√©p√¥t
 */

export const getHistoryByDepotId = async (req, res) => {
  try {
    const { idDep } = req.params;

    const history = await AttributionHistory.find({ depotId: parseInt(idDep) }).sort({ date: -1 });

    res.json(history);
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration historique du d√©p√¥t :', err);
    res.status(500).json({ error: 'Erreur serveur lors de la r√©cup√©ration de l‚Äôhistorique du d√©p√¥t' });
  }
};

export const getGlobalAttributionHistory = async (req, res) => {
  try {
    const history = await AttributionHistory.find().sort({ date: -1 });
    res.json(history);
  } catch (err) {
    console.error('Erreur chargement historique global :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

export const getCurrentAttributionsByDepot = async (req, res) => {
  try {
    const { id } = req.params;

    const attributions = await Attribution.find({
      depotId: Number(id),
      action: 'attribution' // ‚úÖ ne retourne que les attributions actives
    });

    res.status(200).json(attributions);
  } catch (err) {
    console.error('‚ùå Erreur r√©cup√©ration attributions actives :', err);
    res.status(500).json({ message: 'Erreur r√©cup√©ration attributions actives' });
  }
};