// File: material.controller.js
import Material from '../models/material.model.js';
import {getNextSequence} from '../utils/getNextSequence.js';

// üîÅ Lister tout le mat√©riel
export const getAllMaterials = async (_req, res) => {
  try {
    const materials = await Material.find();
    res.json(materials);
  } catch (err) {
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des mat√©riels.' });
  }
};
export const getMaterialsByDepot = async (req, res) => {
  const { idDep } = req.params;
  try {
    const materials = await Material.find({ idDep: Number(idDep) });
    res.status(200).json(materials);
  } catch (err) {
    res.status(500).json({ message: "Erreur serveur", error: err });
  }
};
// üîç Obtenir un mat√©riel par ID
export const getMaterialById = async (req, res) => {
  try {
    const material = await Material.findById(req.params.id);
    if (!material) return res.status(404).json({ error: 'Mat√©riel non trouv√©.' });
    res.json(material);
  } catch (err) {
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du mat√©riel.' });
  }
};
// ‚ûï Ajouter un nouveau mat√©riel
export const createMaterial = async (req, res) => {
  try {
    // On extrait les champs du corps de la requ√™te d√®s le d√©but
    const {
      name,
      quantity,
      idDep,
      category,
      state,
      assignedTo,
      description,
      createdAt,
      ...rest
    } = req.body;

    // Maintenant "name" est d√©fini
    let material = await Material.findOne(
      {
        name: new RegExp(`^${name}$`, 'i'),
        idDep: rest.idDep // Assure que idDep est d√©fini
       });

    if (material) {
      console.log('Mat√©riel trouv√©, mise √† jour de la quantit√©');
      material.quantity += quantity;
      await material.save();
      res.status(200).json(material);
    } else {
      const newMaterial = new Material({
        name, 
        quantity: quantity || 0, // Assure que quantity est d√©fini
        idDep: idDep || null, // Assure que idDep est d√©fini
        category: category || 'outillage', // Assure que category est d√©fini
        state: state || 'neuf', // Assure que state est d√©fini
        assignedTo: assignedTo || null, // Assure que assignedTo est d√©fini
        description: description || '', // Assure que description est d√©fini
        createdAt: new Date(),
        ...rest
      });

      newMaterial.idMat = await getNextSequence('material');

      const saved = await newMaterial.save();
      res.status(201).json(saved);
      console.log('Requ√™te re√ßue:', req.body);
      console.log('Mat√©riel cr√©√©:', newMaterial);
    }
  } catch (err) {
    console.error('Erreur lors de la cr√©ation du mat√©riel:', err);
    res.status(400).json({ error: 'Erreur lors de la cr√©ation du mat√©riel.' });
  }
};
export async function logMaterialMovement(req, res) {
  try {
    const { materialId, type, quantity } = req.body;
    const material = await Material.findById(materialId);
    if (!material) return res.status(404).json({ error: 'Mat√©riel non trouv√©' });

    // Met √† jour le stock
    if (type === 'entr√©e') {
      material.quantity += quantity;
    } else if (type === 'sortie') {
      if (material.quantity < quantity) {
        return res.status(400).json({ error: 'Stock insuffisant' });
      }
      material.quantity -= quantity;
    }

    await material.save();

    const movement = logMaterialMovement({ materialId, type, quantity });
    await movement.save();

    res.status(201).json(movement);
  } catch (err) {
    res.status(500).json({ error: 'Erreur serveur' });
  }
}
// ‚úèÔ∏è Modifier un mat√©riel
export const updateMaterialByIdMat = async (req, res) => {
  try {
    const updated = await Material.findOneAndUpdate({ idMat: req.params.idMat }, req.body, { new: true });
    if (!updated) return res.status(404).json({ error: 'Mat√©riel non trouv√©.' });
    console.log('updated ' + updated);
    res.json(updated);
  } catch (err) {
    console.error('Erreur update:', err);
    res.status(400).json({ error: 'Erreur lors de la mise √† jour du mat√©riel.' });
  }
};
// üóëÔ∏è Supprimer un mat√©riel
export const deleteMaterialByIdMat = async (req, res) => {
  try {
    const deleted = await Material.findOneAndDelete({ idMat: req.params.idMat });
    if (!deleted) return res.status(404).json({ error: 'Mat√©riel non trouv√©.' });
    res.json({ message: 'Mat√©riel supprim√© avec succ√®s.' });
  } catch (err) {
    res.status(500).json({ error: 'Erreur lors de la suppression du mat√©riel.' });
  }
};
